@page "/chatRoom"
@using ChatAppWeb.Services
@using ChatAppWeb.classes
@using Microsoft.AspNetCore.Http;
@using System.IO;
@using Shared
@using Microsoft.AspNetCore.Components.Forms
@inject MessageService service;
@inject MessageWithImageDto messageDto;
<PageTitle>Chat Room</PageTitle>

<div class="vh-100 pb-5 d-flex flex-column overflow-hidden container-fluid">
    <div class="m-0 p-2 text-center row flex-grow-0">
        <h3 class="m-0">Chat Room</h3>
    </div>
    <div class="h-100 border m-0 p-2 rounded-3 text-center row flex-grow-1 overflow-auto">
        @if (ChatBoxMessages != null)
        {
            <div class="h-100 flex-column d-flex justify-content-start">
                @foreach (var message in ChatBoxMessages)
                {
                    <div class="border border-dark rounded-3 p-2 mb-2 row bg-light">
                        <h5 class="d-flex justify-content-start">@message.Sender</h5>
                        <p class="m-0 text-start">@message.MessageText</p>
                        <p class="d-flex justify-content-end m-0">@message.Timestamp</p>
                    </div>
                }
            </div>
        }

    </div>
    <div class="border rounded-3 m-0 p-2 text-center tow flex-grow-0 mb-5">
        <form class="p-0 m-0 row" @formname="message-form"  onsubmit="return false">
            <div class="col-10">
                <div class="form-group row">
                    <lavel class="col-3 text-end">
                        Name:
                    </lavel>
                    <div class="col-9">
                        <input class="form-control m-0 p-1" @bind="NewMessage!.Sender" placeholder="Tom Riddle"/>
                    </div>
                </div>
                <div class="form-group row mt-1">
                    <label class="col-3 text-end">
                        Message:
                    </label>
                    <div class="col-9 align-content-end">
                        <input class="form-control m-0 p-1" @bind="NewMessage!.MessageText" placeholder="Hello!"/>
                    </div>
                </div>
                <div class="form-group row m-0">
                    <label class="col-3 text-end">
                        Image:
                    </label>
                    <div class="col-9 align-content-end">
                        <InputFile class="form-control m-0 p-1" type="file" accept="image/*" @onchange="HandleImageUpload" />
                    </div>
                </div>
            </div>
            <div class="col col-2">
                <div class="form-group mt-3 row align-content-end">
                    <button class="btn btn-primary" type="submit" @onclick="SendMessage">Send</button>
                </div>
            </div>
        </form>
    </div>

</div>

@code {
    private Message NewMessage = new Message { Sender = "", MessageText = "" };
    private List<Message> ChatBoxMessages = new List<Message>();
    private ChatBox chatBox;
    private long MaxFileSize = 100*1024*1024;
    protected override async Task OnInitializedAsync()
    {
        // Initialize the ChatBox class by injecting the MessageService
        chatBox = new ChatBox(service); // Replace with actual dependency injection

        // Load initial messages
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        // Use the ChatBox class to get messages
        ChatBoxMessages = await chatBox.GetMessagesAsync();

    }
    
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null && file.Size <= MaxFileSize)
        {
            try
            {
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    memoryStream.Position = 0;

                    var buffer = new byte[memoryStream.Length];
                    await memoryStream.ReadAsync(buffer, 0, (int)memoryStream.Length);
                    var base64Image = Convert.ToBase64String(buffer);

                    // Set the base64 encoded image in your messageDto
                    messageDto.Image = base64Image;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }


    private async Task SaveBase64ImageToVolume(string base64Image)
    {
        var volumePath = "/app/Images"; 
        var filePath = Path.Combine(volumePath, "uploaded_image.txt");
        Directory.CreateDirectory(volumePath);
        await File.WriteAllTextAsync(filePath, base64Image);
    }

    private async Task SendMessage()
    {
        NewMessage.Timestamp = DateTime.Now;

        // Use the ChatBox class to send a message
        await chatBox.SendMessageAsync(NewMessage);

        // Reload messages after sending a new message
        await LoadMessages();
        NewMessage = new Message { Sender = "", MessageText = "" };
    }
}
