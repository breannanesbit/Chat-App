@page "/"
@using ChatAppWeb.Services
@using ChatAppWeb.classes
@using System.IO;
@using Microsoft.AspNetCore.SignalR.Client
@using Shared
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Shared.Data
@inject MessageService service;
@inject LocalStorageAccessor localStorageAccessor;
<PageTitle>Chat Room</PageTitle>

<div class="vh-100 pb-5 d-flex flex-column overflow-hidden container-fluid">
    <div class="m-0 p-2 text-center row flex-grow-0">
        <h3 class="m-0">Chat Room</h3>
    </div>
    <div class="h-100 border border-secondary bg-light m-0 p-2 rounded-3 text-center row flex-grow-1 overflow-auto">
        <div class="h-100 flex-column d-flex justify-content-start">
            @if (ChatBoxMessages != null)
            {
                @foreach (var message in ChatBoxMessages)
                {
                    <div style="background-color: #e6f2ff" class="border border-dark rounded-3 p-2 mb-2 row @(message.ClientId == ClientId? "bg-secondary bg-gradient": "")">
                        <h5 class="d-flex border-bottom justify-content-start @(message.ClientId == ClientId? "text-white":"text-dark" )">@message.Sender</h5>
                        <div class="row">
                            <p class="m-0 col text-start @(message.ClientId == ClientId? "text-white":"text-dark" )">@message.MessageText</p>
                            @if(!string.IsNullOrEmpty(message.ImagePath))
                            {
                                <img src="@message.ImagePath" alt="Image" class="img-fluid col p-0 border border-secondary" style="height:100; max-width:150px"/>
                            }
                        </div>
                        <p class="d-flex justify-content-end m-0 @(message.ClientId == ClientId? "text-white":"text-dark" )">@message.Timestamp</p>
                    </div>
                }
            }
            @if (TypingMessage && User != null && User != "")
            {
                <div class="row">
                    <h5 class="text-start mx-2">@User</h5>
                    <div class="typing mt-0">
                        <span class="circle scaling"></span>
                        <span class="circle scaling"></span>
                        <span class="circle scaling"></span>
                    </div>
                </div>
            }

        </div>

    </div>
    <div class="border border-secondary rounded-3 m-0 p-2 px-3 text-center tow flex-grow-0 mb-5" style="background:linear-gradient(#000080, #330033)">
        <form class="p-0 m-0 row" @formname="message-form"  onsubmit="return false">
            <div class="col col-12 col-md-9 col-lg-10 p-0">
                <div class="form-group row px-4">
                    <label class="col-12 col-md-3 col-sm-3 text-white col-form-label text-sm-end " >
                        Name:
                    </label>
                    <div class="col-sm-9 col-md-9 col-lg-9  p-0">
                        <input class="form-control p-1" @oninput="HandleTyping" @bind="NewMessage!.Sender" placeholder="Tom Riddle" />
                    </div>
                </div>
                <div class="form-group row mt-1 px-4">
                    <label class="col-12 col-md-3 text-white col-sm-3 col-form-label text-sm-end">
                        Message:
                    </label>
                    <div class="col-sm-9 p-0">
                        <input class="form-control  p-1" @bind="NewMessage!.MessageText" placeholder="Hello!" disabled="@(string.IsNullOrEmpty(NewMessage.Sender))"/>
                    </div>
                </div>
                <div class="form-group row m-0 mx-2">
                    <label class="col-12 col-md-3 text-white col-sm-3 col-form-label text-sm-end">
                        Image:
                    </label>
                    <div class="col-sm-9 justify-content-center px-0">
                        <InputFile class="form-control  p-1" type="file" accept="image/*" OnChange="@HandleImageUpload" />
                    </div>

                </div>
            </div>
            <div class="col col-12 col-sm-12 col-md-3 mt-md-3 col-lg-2 d-flex justify-content-end align-items-end" >
                <div class="form-group row"  >
                    <button class="btn btn-primary mx-2" style="width:100px; background-color:" type="submit" @onclick="@(() => SendMessage())">Send</button>
                </div>
            </div>
        </form>
    </div>

</div>

@* Still need to implement the timer to call the send function if less than a second has gone by
*@

@code {
        /*
        * each client gets a unique guid
        * inital vector clock dictionary on initial load(stored localy)
        * each page load get the saved copy of uuid, lampor clock and the vector clock from local storage.
        * when ever a message is sent it will need he uuid, lamport clock and vector clock too(optional data)
    */

    //add some color fix the message input section to work with mobile.
    private string User;
    private HubConnection? hubConnection;
    private Message NewMessage = new Message { Sender = "", MessageText = "", ImagePath = "" };
    private List<Message> ChatBoxMessages = new List<Message>();
    private ChatBox chatBox;
    private long MaxFileSize = 100 * 1024 * 1024;
    private bool TypingMessage = false;
    private CancellationTokenSource typingCancellationToken;
    private MessageWithImageDto messageDto = new MessageWithImageDto { message = null, Image = "" };
    private System.Timers.Timer typingTimer;
    private Guid ClientId/* = Guid.NewGuid() */;
    private int LamportCounter = 0;
    private Dictionary<Guid, int> VectorClock = new Dictionary<Guid, int>();
    private string Key { get; set; } = "";
    private string Value { get; set; } = "";
    private string StoredValue { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
       
        ClientId = await localStorageAccessor.GetValueAsync<Guid>("ClientId");
        if (ClientId == Guid.Empty)
        {
            ClientId = Guid.NewGuid();
            await localStorageAccessor.SetValueAsync("ClientId", ClientId);
        }

        VectorClock = await localStorageAccessor.GetValueAsync<Dictionary<Guid, int>>("VectorClock");
        if (VectorClock == null)
        {
            VectorClock = new Dictionary<Guid, int>();
            VectorClock[ClientId] = 0;
            await localStorageAccessor.SetValueAsync("VectorClock", VectorClock);
        }

        LamportCounter = VectorClock[ClientId];

        // Initialize the ChatBox class by injecting the MessageService
        chatBox = new ChatBox(service); // Replace with actual dependency injection

        // Load initial messages
        await LoadMessages();

        typingTimer = new System.Timers.Timer();


        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://client.bre-aub-chatapp.duckdns.org/chathub")
        .Build();


        hubConnection.On<string>("ReceiveTyping", (sender) =>
        {
            if (sender != NewMessage.Sender)
            {
                User = sender;
                ShowTypingIndicator();
            }
            //var encodedMsg = $"{user}";
            //add bubble
            //messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<DateTime, Guid>("ReceiveMessageTimestamp", (timestamp, guid) =>
        {
            if (timestamp != null)
            {
                CompareClocks(guid);
                GetMessagesWithTimestamp(timestamp);
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

            

    }

    private void CompareClocks(Guid grid)
    {
        var countLookUp = VectorClock[grid];
        if (countLookUp > LamportCounter )
        {
            LamportCounter = countLookUp++;
            VectorClock[ClientId] = LamportCounter;
        }
    }

    private async Task ShowTypingIndicator()
    {
        TypingMessage = true;
        InvokeAsync(StateHasChanged);

    }

    private async Task CheckTypingStatus()
    {
        TypingMessage = false;
        InvokeAsync(StateHasChanged);

        await Task.CompletedTask;
    }

    // private async Task Send()
    // {
    //     typingTimer.Change(Timeout.Infinite, Timeout.Infinite);

    //     if (hubConnection is not null)
    //     {
    //         await hubConnection.SendAsync("SendMessage", NewMessage.Sender);
    //     }
    // }

    private async Task HandleTyping()
    {
        typingTimer.Interval = 1000;
        typingTimer.Elapsed += (s_, e_) => CheckTypingStatus();
        typingTimer.Enabled = true;


        if (hubConnection is not null && !string.IsNullOrEmpty(NewMessage.Sender))
        {
            await hubConnection.SendAsync("StartTyping", NewMessage.Sender);
            await ShowTypingIndicator();
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task LoadMessages()
    {
        // Use the ChatBox class to get messages
        ChatBoxMessages = await chatBox.GetMessagesAsync();

    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null && file.Size <= MaxFileSize)
        {
            try
            {
                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(memoryStream);
                    memoryStream.Position = 0;

                    var buffer = new byte[memoryStream.Length];
                    await memoryStream.ReadAsync(buffer, 0, (int)memoryStream.Length);
                    var base64Image = Convert.ToBase64String(buffer);

                    // Set the base64 encoded image in your messageDto
                    messageDto.Image = base64Image;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }


    private async Task SaveBase64ImageToVolume(string base64Image)
    {
        var volumePath = "/app/Images"; 
        var filePath = Path.Combine(volumePath, "uploaded_image.txt");
        Directory.CreateDirectory(volumePath);
        await File.WriteAllTextAsync(filePath, base64Image);
    }

    private async Task SendMessage()
    {
        LamportCounter++;
        NewMessage.Timestamp = DateTime.Now;
        messageDto.message = NewMessage;
        NewMessage.ClientId = ClientId;
        NewMessage.LamportCounter = LamportCounter;

        VectorClock[ClientId] = LamportCounter;

        // Use the ChatBox class to send a message
        await chatBox.SendMessageAsync(messageDto);
        await SendingSignalWithNewMessage();

        // Reload messages after sending a new message
        //await LoadMessages();
        NewMessage = new Message { Sender = "", MessageText = "", ImagePath = "" };
    }


    private async Task SendingSignalWithNewMessage()
    {
        if (hubConnection is not null && NewMessage.Timestamp != null)
        {
            await hubConnection.SendAsync("NewMessage", NewMessage.Timestamp, ClientId);
        }
    }

    private async Task GetMessagesWithTimestamp(DateTime timestamp)
    {
        ChatBoxMessages = await chatBox.GetMessagesWithTimestampAsync(timestamp);
        ChatBoxMessages.OrderBy(c => c.LamportCounter).ThenBy(c => c.Timestamp);
    }

    //****************Local Storage***********************/
    public async Task SetValueAsync()
    {
        await localStorageAccessor.SetValueAsync(Key, Value);
    }
    public async Task GetValueAsync()
    {
        StoredValue = await localStorageAccessor.GetValueAsync<string>(Key);
    }
    public async Task RemoveAsync()
    {
        await localStorageAccessor.RemoveAsync(Key);
    }
    public async Task ClearAllAsync()
    {
        await localStorageAccessor.Clear();
    }
    //****************************************************/
}
