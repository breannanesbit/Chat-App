version: "3"
services:
  
  swag:
    image: lscr.io/linuxserver/swag
    container_name: bre_aub_swag
    restart: unless-stopped
    cap_add:
        - NET_ADMIN
    environment:
        - PUID=1000
        - PGID=1000
        - TZ=America/Denver
        - SubDomains=wildcard 
        - URL=bre-aub-chatapp.duckdns.org
        - VALIDATION=duckdns
        - DUCKDNSTOKEN=${DUCKDNSTOKEN}
        - STAGING=false
    volumes:
        - swag_data:/config
        - ./nginx.conf:/config/nginx/site-confs/default.conf # new part
    ports:
        - 443:443 

  client:
    build:
      context: .
      dockerfile: ./ChatAppWeb/Dockerfile
    restart: unless-stopped
    ports:
      - 4001:4001
    mem_limit: 512M

  api: 
    build:
      context: .
      dockerfile: ./ChatAppAPI/Dockerfile
    container_name: bre_aubrey_api
    restart: unless-stopped
    ports: 
        - 4002:4002
    labels:
    - "prometheus.io/scrape=true"
    - "prometheus.io/path=/metrics"
    - "prometheus.io/port=4002"
    networks:
      - database_network

  image-api: 
    build:
      context: .
      dockerfile: ./ImageMircoServiceAPI/Dockerfile
    container_name: bre_aubrey_image_api
    restart: unless-stopped
    environment:
      - IMAGE_COMPRESSION_ENABLED=true
    ports: 
        - 4003:4003
    volumes:
      - images_data:/app/Images
    networks:
      - database_network

  
  postgres:
    image: postgres:latest
    container_name: my_postgres
    environment:
        POSTGRES_USER: your_username
        POSTGRES_PASSWORD: your_password
        POSTGRES_DB: your_database_name
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - database_network


  grafana:
    image: grafana/grafana:latest
    ports:
      - "4004:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana_datasources.yml:/etc/grafana/provisioning/datasources/ds.yaml
      - ./prometheus_datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml


  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"

  otel-collector:
    image: otel/opentelemetry-collector
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config", "/etc/otel-collector-config.yaml"]

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - 9090:9090
    networks:
      - monitoring

  zipkin:
    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}
    container_name: zipkin
    environment:
      - STORAGE_TYPE=mem
    ports:
      - 9411:9411

 
volumes:
  postgres_data:
  prometheus_data: 
  images_data:
  swag_data:


networks:
  monitoring:
    driver: bridge
  database_network:
    driver: bridge


